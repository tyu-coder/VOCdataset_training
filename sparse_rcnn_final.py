_base_=[
    './_base_/schedules/schedule_1x.py',
    './_base_/default_runtime.py'

]
dataset_type='CocoDataset'
data_root='data/SBD/benchmark_RELEASE/dataset/'

metainfo=dict(
    classes=(
         "aeroplane","bicycle","bird","boat","bottle","bus","car","cat","chair","cow","diningtable","dog","horse","motorbike","person","pottedplant","sheep","sofa","train","tvmonitor"
    
    )
)
img_norm_cfg=dict(
    mean=[123.675,116.28,103.53],
    std=[58.395,57.12,57.375],
    to_rgb=True
)
train_pipeline=[
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations',with_bbox=True),
    dict(type='Resize',scale=(1333,800),keep_ratio=True),
    dict(type='RandomFlip',prob=0.5),
    dict(type='PackDetInputs'),
]
test_pipeline=[
    dict(type='LoadImageFromFile'),
    dict(type='Resize',scale=(1333,800),keep_ratio=True),
    dict(type='LoadAnnotations',with_bbox=True),
    dict(type='PackDetInputs',
         meta_keys=('img_id','img_path','ori_shape','img_shape','scale_factor','flip','flip_direction')),

]
train_dataloader=dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler',shuffle=True),
    dataset=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file='annotations/sbd_train_coco.json',
        data_prefix=dict(img='img/'),
        metainfo=metainfo,
        pipeline=train_pipeline,
        filter_cfg=dict(filter_empty_gt=True,min_size=32)

    )
)
val_dataloader=dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler',shuffle=False),
    dataset=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file='annotations/sbd_val_coco.json',
        data_prefix=dict(img='img/'),
        metainfo=metainfo,
        pipeline=test_pipeline,
    ),
)
test_dataloader=val_dataloader

val_evaluator=dict(
    type='CocoMetric',
    ann_file=data_root+'annotations/sbd_val_coco.json',
    metric='bbox',
    outfile_prefix='./debug_eval/preds'

)
test_evaluator=val_evaluator

model=dict(
    type='SparseRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=img_norm_cfg['mean'],
        std=img_norm_cfg['std'],
        bgr_to_rgb=True,
        pad_size_divisor=32
    ),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0,1,2,3),
        frozen_stages=1,
        norm_cfg=dict(type='BN',requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained',checkpoint='torchvision://resnet50')
    ),
    neck=dict(
        type='FPN',
        in_channels=[256,512,1024,2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_input',
        num_outs=4

    ),
    rpn_head=dict(
        type='EmbeddingRPNHead',
        num_proposals=100,
        proposal_feature_channel=256
    ),
    roi_head=dict(
        type='SparseRoIHead',
        num_stages=6,
        stage_loss_weights=[1.0]*6,
        proposal_feature_channel=256,
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign',output_size=7,sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4,8,16,32]
        ),
        bbox_head=[
            dict(
                type='DIIHead',
                num_classes=20,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=1,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU',inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    act_cfg=dict(type='ReLU',inplace=True),
                    norm_cfg=dict(type='LN')

                ),
                loss_bbox=dict(type='L1Loss',loss_weight=5.0),
                loss_iou=dict(type='GIoULoss',loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0
                ),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.,0.,0.,0.],
                    target_stds=[0.5,0.5,1.,1.]
                )

            )for _ in range(6)
        ]
    ),
    train_cfg=dict(
        rpn=None,
        rcnn=[
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    match_costs=[
                        dict(type='FocalLossCost',weight=2.0),
                        dict(type='BBoxL1Cost',weight=5.0,box_format='xyxy'),
                        dict(type='IoUCost',iou_mode='giou',weight=2.0)
                    ]
                ),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1

            )for _ in range(6)
        ]
    ),
    test_cfg=dict(
        rpn=None,
        rcnn=dict(max_per_img=100)
    )


)
optim_wrapper=dict(
    optimizer=dict(
        _delete_=True,
        type='AdamW',
        lr=1e-4,
        weight_decay=0.0001
    ),
    clip_grad=dict(max_norm=1.0,norm_type=2)
)
train_cfg=dict(type='EpochBasedTrainLoop',max_epochs=10,val_interval=1)
val_cfg=dict(type='ValLoop')
test_cfg=dict(type='TestLoop')



default_hooks=dict(
    logger=dict(type='LoggerHook',interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook',interval=10,max_keep_ckpts=1),
    timer=dict(type='IterTimerHook'),
)
vis_backends=[
    dict(type='TensorboardVisBackend',save_dir='./tb_logs'),
    dict(type='LocalVisBackend',save_dir='./debug_vis')
]
visualizer=dict(
    type='DetLocalVisualizer',
    vis_backends=vis_backends,
    name='visualizer',

)
env_cfg=dict(device='cuda')
work_dir='./work_dirs/sparse_rcnn'
load_from='checkpoints/sparse_rcnn_r50_fpn_1x_coco.pth'